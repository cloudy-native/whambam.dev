name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v0.2.0)"
        required: true
        type: string

permissions:
  contents: write

env:
  RELEASE_TAG: ${{ github.event.inputs.tag || github.ref_name }}

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        include:
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2

      - name: Build
        if: ${{ matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'x86_64-unknown-linux-musl' && matrix.target != 'aarch64-unknown-linux-musl' }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Install aarch64 cross-compiler (Linux)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build (aarch64-unknown-linux-gnu)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target ${{ matrix.target }}

      - name: Install cargo-deb (GNU Linux targets)
        if: ${{ endsWith(matrix.target, '-unknown-linux-gnu') }}
        run: cargo install cargo-deb --locked

      - name: Build .deb package (GNU Linux targets)
        if: ${{ endsWith(matrix.target, '-unknown-linux-gnu') }}
        run: cargo deb --no-build --target ${{ matrix.target }}

      - name: Setup Zig (for musl static builds)
        if: ${{ startsWith(matrix.target, 'x86_64-unknown-linux-musl') || startsWith(matrix.target, 'aarch64-unknown-linux-musl') }}
        uses: mlugg/setup-zig@v1
        with:
          version: 0.12.0

      - name: Install cargo-zigbuild
        if: ${{ startsWith(matrix.target, 'x86_64-unknown-linux-musl') || startsWith(matrix.target, 'aarch64-unknown-linux-musl') }}
        run: cargo install cargo-zigbuild --locked

      - name: Build (musl static)
        if: ${{ startsWith(matrix.target, 'x86_64-unknown-linux-musl') || startsWith(matrix.target, 'aarch64-unknown-linux-musl') }}
        run: cargo zigbuild --release --target ${{ matrix.target }}

      - name: Package
        run: |
          mkdir -p whambam-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/whambam whambam-${{ matrix.target }}/
          tar -czf whambam-${{ env.RELEASE_TAG }}-${{ matrix.target }}.tar.gz -C whambam-${{ matrix.target }} whambam
          shasum -a 256 whambam-${{ env.RELEASE_TAG }}-${{ matrix.target }}.tar.gz > whambam-${{ env.RELEASE_TAG }}-${{ matrix.target }}.tar.gz.sha256

      - name: Package .deb and checksum (GNU Linux targets)
        if: ${{ endsWith(matrix.target, '-unknown-linux-gnu') }}
        run: |
          DEB_FILE=$(ls target/${{ matrix.target }}/debian/*.deb | head -n1)
          echo "Using $DEB_FILE"
          shasum -a 256 "$DEB_FILE" > "$DEB_FILE.sha256"

      - name: Upload .deb artifact (GNU Linux targets)
        if: ${{ endsWith(matrix.target, '-unknown-linux-gnu') }}
        uses: actions/upload-artifact@v4
        with:
          name: whambam-deb-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/debian/*.deb
            target/${{ matrix.target }}/debian/*.deb.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: whambam-${{ matrix.target }}
          path: |
            whambam-${{ env.RELEASE_TAG }}-${{ matrix.target }}.tar.gz
            whambam-${{ env.RELEASE_TAG }}-${{ matrix.target }}.tar.gz.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            artifacts/*/whambam-*.tar.gz
            artifacts/*/whambam-*.tar.gz.sha256
            artifacts/*/*.deb
            artifacts/*/*.deb.sha256

  update-homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: cloudy-native/homebrew-whambam
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Get release info and update formula
        run: |
          VERSION=${RELEASE_TAG#v}

          # Get SHA256 checksums from the release
          ARM_SHA=$(curl -sL "https://github.com/cloudy-native/whambam.dev/releases/download/v${VERSION}/whambam-v${VERSION}-aarch64-apple-darwin.tar.gz" | shasum -a 256 | cut -d' ' -f1)
          INTEL_SHA=$(curl -sL "https://github.com/cloudy-native/whambam.dev/releases/download/v${VERSION}/whambam-v${VERSION}-x86_64-apple-darwin.tar.gz" | shasum -a 256 | cut -d' ' -f1)

          # Update the formula
          cat > homebrew-tap/Formula/whambam.rb << EOF
          class Whambam < Formula
            desc "whambam: a simple CLI tool for web performance testing"
            homepage "https://github.com/cloudy-native/whambam.dev"
            license "MIT"
            head "https://github.com/cloudy-native/whambam.dev.git", branch: "main"
            
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/cloudy-native/whambam.dev/releases/download/v${VERSION}/whambam-v${VERSION}-aarch64-apple-darwin.tar.gz"
                sha256 "${ARM_SHA}"
              else
                url "https://github.com/cloudy-native/whambam.dev/releases/download/v${VERSION}/whambam-v${VERSION}-x86_64-apple-darwin.tar.gz"
                sha256 "${INTEL_SHA}"
              end
            end
            
            def install
              bin.install "whambam"
            end
            
            test do
              system "#{bin}/whambam", "--version"
            end
          end
          EOF

      - name: Commit and push formula update
        run: |
          cd homebrew-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/whambam.rb
          git commit -m "Update whambam to ${RELEASE_TAG#v}"
          git push
