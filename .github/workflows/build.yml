name: Build and Release

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # # Windows (TBD)
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   name: whambam-windows-x86_64.exe
            
          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            name: whambam-macos-x86_64
            
          # macOS ARM
          - target: aarch64-apple-darwin
            os: macos-latest
            name: whambam-macos-arm64
            
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: whambam-linux-x86_64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: whambam-linux-arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation tools for ARM64 Linux
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cargo build --release --target ${{ matrix.target }} --features openssl/vendored
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          
      - name: Rename binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/whambam.exe" "${{ matrix.name }}"
          else
            cp "target/${{ matrix.target }}/release/whambam" "${{ matrix.name }}"
            chmod +x "${{ matrix.name }}"
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - name: Create Development Release
        id: create_dev_release
        if: github.event.inputs.create_release == 'true' && !startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          draft: true
          prerelease: true
          tag_name: dev-${{ github.sha }}
          name: Development Build ${{ github.sha }}
          body: |
            Development build from commit ${{ github.sha }}
            
            This is an automatically generated development build triggered manually.
            Branch: ${{ github.ref_name }}